#! /usr/bin/env python
#
# hntool - A hardening tool for Linux/BSD
# Copyright (C) 2009 Authors
# Authors:
#   * Hugo Doria <mail@hugodoria.org>
#   * Aurelio A. Heckert <aurium ( a ) gmail dot com>
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#

import sys, os
sys.path.append(os.path.dirname(os.path.realpath(__file__))+"/lib")

from optparse import OptionParser, OptionGroup
import hntool.util
import hntool
import output
import string

HNTOOL_VERSION=0.2

opt_parser = OptionParser(
    usage="Usage: %prog [options]",
    version="%prog "+ str(HNTOOL_VERSION)
  )
output_options = OptionGroup(opt_parser, "Output Options")
rule_options = OptionGroup(opt_parser, "Rule Options")

rule_modules = {}
for module in hntool.__all__:
    rule_modules[module] = \
       __import__('hntool.' + module, globals(), locals(), [hntool]).rule(output_options)

def list_rules(*args):
		print '-'*31 + ' hntool rule list ' + '-'*31
		for module in get_modules():
			print string.ljust(module, 16) + ': ' + __import__('hntool.' + \
					module, globals(), locals(), [hntool]).rule().long_name()
		sys.exit(0)

output_modules = {}
for module in output.__formats__:
    output_modules[module] = \
       __import__('output.' + module, globals(), locals(), [hntool]).format(output_options)

def list_output_formats(*args):
    print '-'*30 + ' hntool output list ' + '-'*30
    for module in output_modules:
         print string.ljust( module, 11 ) + ': ' + output_modules[module].description
    sys.exit(0)

opt_parser.add_option("-l", "--list",
                      action="callback",
                      callback=list_rules,
                      help="returns a list of available rules")
opt_parser.add_option("-t", "--output_type",
                      action="store",
                      dest="output_format", default="terminal",
                      help="select the output format")
opt_parser.add_option("--list_output_type",
                      action="callback",
                      callback=list_output_formats,
                      help="list the avaliable output formats")
opt_parser.add_option_group(output_options)
opt_parser.add_option_group(rule_options)

options, args = opt_parser.parse_args( sys.argv[1:] )

#TODO: define one error code for each error to allow automatic interactions.

# yes, only unix for now
if not hntool.util.is_unix():
	print >> sys.stderr, 'Error: You must have a Unix(-like) box. (No candy for you)'
	sys.exit(2)

# checking if we are root. we need to be. oh yeah, baby.
if not hntool.util.is_root():
	print >> sys.stderr, 'Error: You must be root to run hntool'
	print >> sys.stderr, ''
	print >> sys.stderr, opt_parser.print_help()
	sys.exit(2)


# status message must not go to stdout to not mess with the output format.
print >> sys.stderr, '[ Starting hntool checks... ]'

# Run all the modules and its checks.
# The results of each module goes to "report"
report = []
for m in rule_modules:
	report.append({ 'title':rule_modules[m].long_name(),
	                'results':rule_modules[m].analyze(options) })

# Give the report to the user
output_modules[ options.output_format ].output( report, options )

